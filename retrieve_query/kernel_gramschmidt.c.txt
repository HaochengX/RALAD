You are now given some HLS pragma insertion assistants
assistant 1: K(n) = K = √ (3.24)
i
1+2−2i
i=0 i=0
and
K = lim K(n) ≈ 0.6072529350088812561694 (3.25)
n→∞
The scaling factors for different iterations can be calculated in advance and stored in a table. If we
always perform a fixed number of rotations, this is simply one constant. This correction could also
be made in advance by scaling v appropriately before performing the rotations. Sometimes it is
0
ok to ignore this scaling, which results in a processing gain
n−1
1 (cid:89)(cid:112)
A = = lim 1+2−2i ≈ 1.64676025812107 (3.26)
K n→∞
i=0
At each iteration, we need to know the angle θ of the rotation that was just performed. This
i
is derived as θ = arctan2−i. We can precompute these values for each value of i and store them in
i
an on-chip memory and use them as a lookup table. Additionally, we have a control decision that
determines whether the rotation is clockwise or counterclockwise, i.e., we must determine if σ is 1, assistant 2: for (i = N − 1; i > 0; i−−) {
shift reg[i] = shift reg[i − 1];
}
shift reg[0] = x;
acc = 0;
MAC:, assistant 3: N/2−1 N/2−1
(cid:88) −j2πk(2n) (cid:88) −j2πk(2n+1)
G[k] = g[2n]·e N + g[2n+1]·e N (5.14)
n=0 n=0
The first part of this equation deals with the even inputs, hence the 2n terms in both g[] and in
the exponent of e. The second part corresponds to the odd inputs with 2n+1 in both places. Also
note that the sums now go to N/2−1 in both cases which should make sense since we have divided
them into two halves.
We transform Equation 5.14 to the following:
N/2−1 N/2−1
(cid:88) −j2πkn (cid:88) −j2πk(2n) −j2πk
G[k] = g[2n]·e N/2 + g[2n+1]·e N ·e N (5.15)
n=0 n=0
103FAST FOURIER TRANSFORM
In the first summation (even inputs), we simply move the 2 into the denominator so that it is
now N/2. The second summation (odd inputs) uses the power rule to separate the +1 leaving two
complex exponentials. We can further modify this equation to
N/2−1 N/2−1
(cid:88) −j2πkn −j2πk (cid:88) −j2πkn
G[k] = g[2n]·e N/2 +e N · g[2n+1]·e N/2 (5.16)
n=0 n=0
 Now try your best to Optimize the following code through inserting pragma hls lines
#include <math.h>

void kernel_gramschmidt(int m,int n,float A[60][80],float R[80][80],float Q[60][80])
{
  int i;
  int j;
  int k;
  float nrm;
{
    
    
    
    for (k = 0; k < 80; k++) {
      nrm = 0.0;
      
      for (i = 0; i < 60; i++) {
        nrm += A[i][k] * A[i][k];
      }
      R[k][k] = sqrt(nrm);
      
      for (i = 0; i < 60; i++) {
        Q[i][k] = A[i][k] / R[k][k];
      }
      
      for (j = k + 1; j < 80; j++) {
        R[k][j] = 0.0;
        
        for (i = 0; i < 60; i++) {
          R[k][j] += Q[i][k] * A[i][j];
        }
        
        for (i = 0; i < 60; i++) {
          A[i][j] = A[i][j] - Q[i][k] * R[k][j];
        }
      }
    }
  }
}
