You are now given some HLS pragma insertion assistants
assistant 1: K(n) = K = √ (3.24)
i
1+2−2i
i=0 i=0
and
K = lim K(n) ≈ 0.6072529350088812561694 (3.25)
n→∞
The scaling factors for different iterations can be calculated in advance and stored in a table. If we
always perform a fixed number of rotations, this is simply one constant. This correction could also
be made in advance by scaling v appropriately before performing the rotations. Sometimes it is
0
ok to ignore this scaling, which results in a processing gain
n−1
1 (cid:89)(cid:112)
A = = lim 1+2−2i ≈ 1.64676025812107 (3.26)
K n→∞
i=0
At each iteration, we need to know the angle θ of the rotation that was just performed. This
i
is derived as θ = arctan2−i. We can precompute these values for each value of i and store them in
i
an on-chip memory and use them as a lookup table. Additionally, we have a control decision that
determines whether the rotation is clockwise or counterclockwise, i.e., we must determine if σ is 1, assistant 2: int k = 0;
process symbols:
for(length = TREE DEPTH; length >= 0; length−−) {
count = codeword length histogram[length];
for(i = 0; i < count; i++) {
#pragma HLS pipeline II=1
symbol bits[sorted[k++].value] = length;
}
}
Figure 11.12: Alternate loop structure for the process symbols loop in Figure 11.11.
symbols are assigned the longest codes while the most frequent symbols are assigned the shortest
code. Each time through the process symbols loop, we assign the length of one symbol. The length
of the symbol is determined by the the inner do/while loop, which steps through the histogram
of lengths. This loop finds the largest bit length that has not yet had codewords assigned and
stores the number of codewords in that length in count. Each time through the outer loop, count
is decremented until we run out of codewords. When count becomes zero, the inner do/while loop
executes again to find a length with codewords to assign., assistant 3: N/2−1 N/2−1
(cid:88) −j2πk(2n) (cid:88) −j2πk(2n+1)
G[k] = g[2n]·e N + g[2n+1]·e N (5.14)
n=0 n=0
The first part of this equation deals with the even inputs, hence the 2n terms in both g[] and in
the exponent of e. The second part corresponds to the odd inputs with 2n+1 in both places. Also
note that the sums now go to N/2−1 in both cases which should make sense since we have divided
them into two halves.
We transform Equation 5.14 to the following:
N/2−1 N/2−1
(cid:88) −j2πkn (cid:88) −j2πk(2n) −j2πk
G[k] = g[2n]·e N/2 + g[2n+1]·e N ·e N (5.15)
n=0 n=0
103FAST FOURIER TRANSFORM
In the first summation (even inputs), we simply move the 2 into the denominator so that it is
now N/2. The second summation (odd inputs) uses the power rule to separate the +1 leaving two
complex exponentials. We can further modify this equation to
N/2−1 N/2−1
(cid:88) −j2πkn −j2πk (cid:88) −j2πkn
G[k] = g[2n]·e N/2 +e N · g[2n+1]·e N/2 (5.16)
n=0 n=0
 Now try your best to Optimize the following code through inserting pragma hls lines
void kernel_syrk(int n,int m,float alpha,float beta,float C[80][80],float A[80][60])
{
  int i;
  int j;
  int k;
//BLAS PARAMS
//TRANS = 'N'
//UPLO  = 'L'
// =>  Form  C := alpha*A*A**T + beta*C.
//A is NxM
//C is NxN
{
    
    
    
    for (i = 0; i < 80; i++) {
      for (j = 0; j <= i; j++) {
        C[i][j] *= beta;
      }
      
      
      
      for (k = 0; k < 60; k++) {
        for (j = 0; j <= i; j++) {
          C[i][j] += alpha * A[i][k] * A[j][k];
        }
      }
    }
  }
}
