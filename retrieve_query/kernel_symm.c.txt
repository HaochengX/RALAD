You are now given some HLS pragma insertion assistants
assistant 1: void matrixmul(int A[N][M], int B[M][P], int AB[N][P]) {
#pragma HLS ARRAY RESHAPE variable=A complete dim=2
#pragma HLS ARRAY RESHAPE variable=B complete dim=1
/∗ for each row and column of AB ∗/
row: for(int i = 0; i < N; ++i) {
col: for(int j = 0; j < P; ++j) {
#pragma HLS PIPELINE II=1
/∗ compute (AB)i,j ∗/, assistant 2: Figure 6.2 provides a baseline code for sparse matrix vector multiplication. The spmv function has
five arguments. The arguments rowPtr, columnIndex, and values correspond to the input matrix M
in CRS format. These are equivalent to the data structures shown in Figure 6.1. The argument
y holds the output result y and the argument x holds the input vector x to be multiplied by the
matrix. The variable NUM ROWS indicates the number of rows in the matrix M. The variable
NNZ is the number of non-zero elements in the matrix M. Finally, the variable SIZE is the number
of elements in the arrays x and y.
The outer for loop, labeled L1, iterates across each row of the matrix. Multiplying this row of
the matrix with the vector x will produce one element of y. The inner loop labeled L2 loop across
the elements in the columns of the matrix M. The L2 loop iterates rowPtr[i+1] − rowPtr[i] times,
119SPARSE MATRIX VECTOR MULTIPLICATION
#ifndef SPMV H
#define SPMV H, assistant 3: K(n) = K = √ (3.24)
i
1+2−2i
i=0 i=0
and
K = lim K(n) ≈ 0.6072529350088812561694 (3.25)
n→∞
The scaling factors for different iterations can be calculated in advance and stored in a table. If we
always perform a fixed number of rotations, this is simply one constant. This correction could also
be made in advance by scaling v appropriately before performing the rotations. Sometimes it is
0
ok to ignore this scaling, which results in a processing gain
n−1
1 (cid:89)(cid:112)
A = = lim 1+2−2i ≈ 1.64676025812107 (3.26)
K n→∞
i=0
At each iteration, we need to know the angle θ of the rotation that was just performed. This
i
is derived as θ = arctan2−i. We can precompute these values for each value of i and store them in
i
an on-chip memory and use them as a lookup table. Additionally, we have a control decision that
determines whether the rotation is clockwise or counterclockwise, i.e., we must determine if σ is 1
 Now try your best to Optimize the following code through inserting pragma hls lines
void kernel_symm(int m,int n,float alpha,float beta,float C[60][80],float A[60][60],float B[60][80])
{
  float temp2;
  int i;
  int j;
  int k;
  
//BLAS PARAMS
//SIDE = 'L'
//UPLO = 'L'
// =>  Form  C := alpha*A*B + beta*C
// A is MxM
// B is MxN
// C is MxN
//note that due to Fortran array layout, the code below more closely resembles upper triangular case in BLAS
{
    
    
    
    for (i = 0; i < 60; i++) {
      
      
      
      for (j = 0; j < 80; j++) {
        temp2 = ((float )0);
        for (k = 0; k < i; k++) {
          C[k][j] += alpha * B[i][j] * A[i][k];
          temp2 += B[k][j] * A[i][k];
        }
        C[i][j] = beta * C[i][j] + alpha * B[i][j] * A[i][i] + alpha * temp2;
      }
    }
  }
}
