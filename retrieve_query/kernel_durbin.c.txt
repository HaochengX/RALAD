You are now given some HLS pragma insertion assistants
assistant 1: void dut(int in[N], int out[N], int n) {
    hls_thread_local hls::split::round_robin<int, NP> split1;
    hls_thread_local hls::merge::round_robin<int, NP> merge1;
#pragma HLS dataflow

    read_in(in, n, split1.in);

    // Task-Channels
    hls_thread_local hls::task t[NP];
    for (int i = 0; i < NP; i++) {
#pragma HLS unroll
        t[i](worker, split1.out[i], merge1.in[i]);
    }

    write_out(merge1.out, out, n);
}, assistant 2: void dut(A in[N], A out[N]) {
#pragma HLS interface axis port = in
#pragma HLS interface axis port = out
#pragma HLS disaggregate variable = in
#pragma HLS disaggregate variable = out
    int sum = 0;
    for (unsigned i = 0; i < N; i++) {
        out[i].c = in[i].c;
        out[i].i = in[i].i;
    }
}, assistant 3: K(n) = K = √ (3.24)
i
1+2−2i
i=0 i=0
and
K = lim K(n) ≈ 0.6072529350088812561694 (3.25)
n→∞
The scaling factors for different iterations can be calculated in advance and stored in a table. If we
always perform a fixed number of rotations, this is simply one constant. This correction could also
be made in advance by scaling v appropriately before performing the rotations. Sometimes it is
0
ok to ignore this scaling, which results in a processing gain
n−1
1 (cid:89)(cid:112)
A = = lim 1+2−2i ≈ 1.64676025812107 (3.26)
K n→∞
i=0
At each iteration, we need to know the angle θ of the rotation that was just performed. This
i
is derived as θ = arctan2−i. We can precompute these values for each value of i and store them in
i
an on-chip memory and use them as a lookup table. Additionally, we have a control decision that
determines whether the rotation is clockwise or counterclockwise, i.e., we must determine if σ is 1
 Now try your best to Optimize the following code through inserting pragma hls lines

void kernel_durbin(int n,float r[120],float y[120])
{
  float z[120];
  float alpha;
  float beta;
  float sum;
  int i;
  int k;
{
    y[0] = -r[0];
    beta = 1.0;
    alpha = -r[0];
    
    
    
    for (k = 1; k < 120; k++) {
      beta = (((float )1) - alpha * alpha) * beta;
      sum = 0.0;
      for (i = 0; i < k; i++) {
        sum += r[k - i - 1] * y[i];
      }
      alpha = -(r[k] + sum) / beta;
      for (i = 0; i < k; i++) {
        z[i] = y[i] + alpha * y[k - i - 1];
      }
      for (i = 0; i < k; i++) {
        y[i] = z[i];
      }
      y[k] = alpha;
    }
  }
}
