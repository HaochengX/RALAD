You are now given some HLS pragma insertion assistants
assistant 1: for (i = N − 1; i > 0; i−−) {
shift reg[i] = shift reg[i − 1];
}
shift reg[0] = x;
acc = 0;
MAC:, assistant 2: void matrixmul(int A[N][M], int B[M][P], int AB[N][P]) {
#pragma HLS ARRAY RESHAPE variable=A complete dim=2
#pragma HLS ARRAY RESHAPE variable=B complete dim=1
/∗ for each row and column of AB ∗/
row: for(int i = 0; i < N; ++i) {
col: for(int j = 0; j < P; ++j) {
#pragma HLS PIPELINE II=1
/∗ compute (AB)i,j ∗/, assistant 3: K(n) = K = √ (3.24)
i
1+2−2i
i=0 i=0
and
K = lim K(n) ≈ 0.6072529350088812561694 (3.25)
n→∞
The scaling factors for different iterations can be calculated in advance and stored in a table. If we
always perform a fixed number of rotations, this is simply one constant. This correction could also
be made in advance by scaling v appropriately before performing the rotations. Sometimes it is
0
ok to ignore this scaling, which results in a processing gain
n−1
1 (cid:89)(cid:112)
A = = lim 1+2−2i ≈ 1.64676025812107 (3.26)
K n→∞
i=0
At each iteration, we need to know the angle θ of the rotation that was just performed. This
i
is derived as θ = arctan2−i. We can precompute these values for each value of i and store them in
i
an on-chip memory and use them as a lookup table. Additionally, we have a control decision that
determines whether the rotation is clockwise or counterclockwise, i.e., we must determine if σ is 1
 Now try your best to Optimize the following code through inserting pragma hls lines
void kernel_ludcmp(int n,float A[120][120],float b[120],float x[120],float y[120])
{
  int i;
  int j;
  int k;
  float w;
{
    
    
    
    for (i = 0; i < 120; i++) {
      
      for (j = 0; j < i; j++) {
        w = A[i][j];
        for (k = 0; k < j; k++) {
          w -= A[i][k] * A[k][j];
        }
        A[i][j] = w / A[j][j];
      }
      
      for (j = i; j < 120; j++) {
        w = A[i][j];
        for (k = 0; k < i; k++) {
          w -= A[i][k] * A[k][j];
        }
        A[i][j] = w;
      }
    }
    
    
    
    for (i = 0; i < 120; i++) {
      w = b[i];
      for (j = 0; j < i; j++) {
        w -= A[i][j] * y[j];
      }
      y[i] = w;
    }
    
    
    
    for (i = 0; i <= 119; i++) {
      int _in_i = 119 + -1 * i;
      w = y[_in_i];
      for (j = _in_i + 1; j < 120; j++) {
        w -= A[_in_i][j] * x[j];
      }
      x[_in_i] = w / A[_in_i][_in_i];
    }
    i = 0 + -1;
  }
}
