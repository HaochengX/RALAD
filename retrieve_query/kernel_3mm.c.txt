You are now given some HLS pragma insertion assistants
assistant 1: void krnl_vmult(uint32_t* in1, uint32_t* in2, uint32_t* out, int vSize) {
    static hls::stream<uint32_t> inStream1("input_stream_1");
    static hls::stream<uint32_t> inStream2("input_stream_2");
    static hls::stream<uint32_t> outStream("output_stream");
#pragma HLS INTERFACE m_axi port = in1 bundle = gmem0 depth = 4096
#pragma HLS INTERFACE m_axi port = in2 bundle = gmem1 depth = 4096
#pragma HLS INTERFACE m_axi port = out bundle = gmem0 depth = 4096

#pragma HLS dataflow
    // dataflow pragma instruct compiler to run following three APIs in parallel
    read_input(in1, inStream1, vSize);
    read_input(in2, inStream2, vSize);
    compute_mult(inStream1, inStream2, outStream, vSize);
    write_result(out, outStream, vSize);
}
}, assistant 2: and a 4×4 S matrix. The values of S for a 4 point DFT are:
 W00 W01 W02 W03
4 4 4 4
W10 W11 W12 W13

S =  4 4 4 4  (5.5)
W20 W21 W22 W23

4 4 4 4
W30 W31 W32 W33
4 4 4 4
100FAST FOURIER TRANSFORM
a) b)
g[0] G[0]
g[0]
+ G[0] 0
W
g[1] 2 G[1]
g[1] -
- G[1]
Figure 5.1: Part a) is a data flow graph for a 2 point DFT/FFT. Part b) shows the same compu-
tation, but viewed as a butterfly structure. This is a common representation for the computation
of an FFT in the digital signal processing domain.
And the DFT equation to compute the frequency output terms are:
 G[0]  W00 W01 W02 W03  g[0]
4 4 4 4
G[1] W10 W11 W12 W13  g[1]
  =  4 4 4 4 ·  (5.6)
G[2] W20 W21 W22 W23  g[2]
4 4 4 4
G[3] W30 W31 W32 W33 g[3]
4 4 4 4
Now we write out the equations for each of the frequency domain values in G[] one-by-one. The
equation for G[0] is:
−j2π·0·0 −j2π·0·1 −j2π·0·2 −j2π·0·3
G[0] = g[0]·e 4 +g[1]·e 4 +g[2]·e 4 +g[3]·e 4 (5.7)
= g[0]+g[1]+g[2]+g[3]
since e0 = 1., assistant 3: void firI1(data t ∗y, data t x);
void firQ1(data t ∗y, data t x);
void firI2(data t ∗y, data t x);
void firQ2(data t ∗y, data t x);
 Now try your best to Optimize the following code through inserting pragma hls lines
void kernel_3mm(int ni,int nj,int nk,int nl,int nm,float E[40][50],float A[40][60],float B[60][50],float F[50][70],float C[50][80],float D[80][70],float G[40][70])
{
  int i;
  int j;
  int k;
{
    
    
    
    for (i = 0; i < 40; i++) {
      
      
      
      for (j = 0; j < 50; j++) {
        E[i][j] = 0.0;
        
        for (k = 0; k < 60; ++k) {
          E[i][j] += A[i][k] * B[k][j];
        }
      }
    }
    
    
    
    for (i = 0; i < 50; i++) {
      
      
      
      for (j = 0; j < 70; j++) {
        F[i][j] = 0.0;
        
        for (k = 0; k < 80; ++k) {
          F[i][j] += C[i][k] * D[k][j];
        }
      }
    }
    
    
    
    for (i = 0; i < 40; i++) {
      
      
      
      for (j = 0; j < 70; j++) {
        G[i][j] = 0.0;
        
        for (k = 0; k < 50; ++k) {
          G[i][j] += E[i][k] * F[k][j];
        }
      }
    }
  }
}
